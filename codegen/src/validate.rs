use crate::common::*;
use crate::gen::Codegen;

use std::format as f;

pub fn codegen(g: &mut Codegen) {
    g.lines([
        "// Auto generated by codegen/src/validate.rs", //
        "",
    ]);

    for encoding in ENCODINGS {
        let ch = map_rs_char_type(encoding);
        let doc_name = map_doc_name(encoding);

        g.ln(f!("/// Validate the {doc_name} string."));
        g.ln("///");
        if encoding == "utf16" {
            g.ln("/// Using native endianness.");
            g.ln("///");
        }

        g.ln(f!("/// Returns [`true`] if and only if the string is valid {doc_name}."));

        g.ln("#[inline]");
        g.ln("#[must_use]");
        g.ln(f!("pub fn validate_{encoding}(data: &[{ch}]) -> bool {{"));
        g.ln("let len = data.len();");
        g.ln("let buf = data.as_ptr();");
        g.ln(f!("unsafe {{ crate::bindings::simdutf_validate_{encoding}(buf, len) }}"));
        g.ln("}");
        g.lf();
    }
}
